function [label, markslbl, marks, runtime] = SeqSC(files, k, meta, opts)
% label = SeqSC(data,k,opts): Sequential Spectral Clustering
% Input:
%       - files: cell array of file names of mat file which contains
%               data matrix 
%               the data matrix of size nSmp x nFea, where each row is a sample
%               point
%       - k: the number of clusters
%       opts: options for this algorithm
%           - p: the number of landmarks picked (default 1000)
%           - r: the number of nearest landmarks for representation (default 5)
%           - numRep: the number of replicates for the final kmeans (default 10)
%           - maxIter: the maximum number of iterations for final kmeans (default 100)
%           - mode: landmark selection method, currently support
%               - 'kmeans': use centers of clusters generated by kmeans (default)
%               - 'random': use randomly sampled points from the original
%                           data set 
%           - useSeqKM: sequential k-means for generating anchor points
%           - useSeqKMLabel: sequential k-means for generating labels
%           The following parameters are effective ONLY in mode 'kmeans'
%           - kmNumRep: the number of replicates for initial kmeans (default 1)
%           - kmMaxIter: the maximum number of iterations for initial kmeans (default 5)
% Output:
%       - label: the cluster assignment for each point
% Requre:
%       litekmeans.m
% Usage:
%       data = rand([100,50]);
%       label = RandBiSC(data,10);
%

if isempty(files),
    [label, markslbl, marks] = deal([]);
    return;
end

% Set and parse parameters
if (~exist('opts','var'))
   opts = [];
end


p = 1000;
if isfield(opts,'p')
    p = opts.p;
end

r = 5;
if isfield(opts,'r')
    r = opts.r;
end

maxIter = 100;
if isfield(opts,'maxIter')
    maxIter = opts.maxIter;
end

numRep = 10;
if isfield(opts,'numRep')
    numRep = opts.numRep;
end

mode = 'kmeans';
if isfield(opts,'mode')
    mode = opts.mode;
end

nSubSmp = p*10;
if isfield(opts,'nSubSmp')
    nSubSmp = opts.nSubSmp;
end

useSeqKMLabel = false; % use sequential k-means
if isfield(opts,'useSeqKMLabel'),
    useSeqKMLabel = opts.useSeqKMLabel;
end

useSeqKM = false; % use sequential k-means
if isfield(opts,'useSeqKM'),
    useSeqKM = opts.useSeqKM;
end


tmpdir = 'tmp';
if ~exist(tmpdir, 'dir'),
    mkdir(tmpdir);
end

nb = length(files);
% nSmp=size(data,1);
nSmp = min(nb*meta.npb, meta.n);

nSubSmp = min(nSubSmp, nSmp);
% subIdx = randperm(nSmp, nSubSmp);
subIdx = randsample(nSmp, nSubSmp);

subData = selectdata(files, meta, subIdx);

runtime = [];

ticId = tic; %------------------------------
% Landmark selection
if strcmp(mode,'kmeans')
    kmMaxIter = 5;
    if isfield(opts,'kmMaxIter')
        kmMaxIter = opts.kmMaxIter;
    end
    kmNumRep = 1;
    if isfield(opts,'kmNumRep')
        kmNumRep = opts.kmNumRep;
    end
    % Generate initial guesss of k-mean centers
    %[IDX,marks]=litekmeans(subData,p,'MaxIter',kmMaxIter,'Replicates',kmNumRep);
    [IDX,marks]=kmeanspp(subData', p, 'MaxIter',kmMaxIter,'Replicates',kmNumRep);
    
    % Refined k-mean centers by sequential k-means
    if useSeqKM,
        tidAnchor = tic;
        [asgn] = countassignment(IDX, p);
        [marks] = updateSeqkmeans(marks, asgn, files, 'data');
        toc(tidAnchor);
    end
%     load marks14
    
    %[dump,marks]=litekmeans(data,p,'MaxIter',kmMaxIter,'Replicates',kmNumRep);
    clear kmMaxIter kmNumRep asgn IDX
elseif strcmp(mode,'random')
    indSmp = randperm(size(subData, 1), p);
    marks = subData(indSmp,:);
    clear indSmp
else
    error('mode does not support!');
end
runtime(end+1) = toc(ticId); %------------------------------

ticId = tic; %------------------------------
Zfiles = cell(1, nb);
D = zeros(1, p);
for i = 1:length(files),
    load(files{i}, 'data');
    % Z construction
    [Z, feaSum] = buildAnchorGraph(data, marks, opts);
    D = D + feaSum;
    fn = fullfile(tmpdir, sprintf('Z_%d.mat', i));
    save(fn, 'Z', 'feaSum');
    Zfiles{i} = fn;
end

% Z = Z./feaSum(ones(size(Z,1),1),:);
ZTZ = zeros(p, p);
for i = 1:length(Zfiles),
    load(Zfiles{i}, 'Z');
    Zhat = Z./D(ones(size(Z,1),1),:);
    ZTZ = ZTZ + Zhat'*Zhat;
    save(Zfiles{i}, 'Zhat', '-append');
end

%[U S V] = mySVD(Z,k+1);
[V, eigvalue] = eig(ZTZ); 
eigvalue = diag(eigvalue);
[dump, index] = sort(eigvalue, 'descend');
eigvalue = eigvalue(index(2:k+1));
eigvalue_MinusHalf = eigvalue.^-0.5;
V = V(:, index(2:k+1));
%U(:,1) = [];
%V(:,1) = [];

V=V./repmat(sqrt(sum(V.^2,2)),1,k);
% U=U./repmat(sqrt(sum(U.^2,2)),1,k);
runtime(end+1) = toc(ticId); %------------------------------

ticId = tic; %------------------------------
% Use subset of data to generate k-means centers
[Zsub, ~] = buildAnchorGraph(subData, marks, opts);
Zsub = Zsub./D(ones(size(Zsub,1),1),:);
% Compute centers from subsampling data
Us = Zsub*bsxfun(@times, V, eigvalue_MinusHalf');
% [sublabel, centers] = litekmeans([Us; V],k,'MaxIter',maxIter,'Replicates',numRep);
runtime(end+1) = toc(ticId); %------------------------------

ticId = tic; %------------------------------
% Compute indicator matrix for all data 
% if ~useSeqKM
%     label = zeros(nsmp, 1); j = 1;
%     for i = 1:length(zfiles),
%         load(zfiles{i}, 'zhat');
%         u = zhat*bsxfun(@times, v, eigvalue_minushalf');
%         save(zfiles{i}, 'u', '-append');
%         
%         lenu = size(u, 1);
%         label(j:j+lenu-1) = knnsearch(centers, u);
%         j = j + lenu;
%     end
%     markslbl = knnsearch(centers, v);
% else
%     %[asgn] = countassignment(sublabel, k);
%     asgn = int32(ones(k,1));
%     
%     % Refined k-mean centers by sequential k-means
%     centersT = centers';
%     tidFinal = tic;
%     for kmiter = 1:10
%         for i = 1:length(Zfiles),
%             load(Zfiles{i}, 'Zhat');
%             U = Zhat*bsxfun(@times, V, eigvalue_MinusHalf');
% 
%             tmpasgn = asgn;
%             seqKmeans2(centersT, tmpasgn, U');
% 
%             save(Zfiles{i}, 'U', '-append');
%         end
%     end
%     centers = centersT';
%     toc(tidFinal);
%     
%     % Compute all labels
%     label = zeros(nSmp, 1); j = 1;
%     for i = 1:length(Zfiles),
%         load(Zfiles{i}, 'U');
%         
%         lenU = size(U, 1);
%         label(j:j+lenU-1) = knnsearch(centers, U);
%         j = j + lenU;
%     end
%     markslbl = knnsearch(centers, V);
% end

% %==========================================================
% % rand('twister',5489) 
% allU = zeros(nSmp, k); j = 1;
% for i = 1:length(Zfiles),
%     load(Zfiles{i}, 'Zhat');
%     U = Zhat*bsxfun(@times, V, eigvalue_MinusHalf');
%     save(Zfiles{i}, 'U', '-append');
% 
% 
%     lenU = size(U, 1);
%     allU(j:j+lenU-1, :) = U;
%     j = j + lenU;
% end
% % rndidx = randsample(size(allU, 1), k);
% % seedcenters = allU(rndidx, :);
% % [alllabel, centers] = litekmeans([allU],k, 'start', seedcenters, 'MaxIter',maxIter,'Replicates',numRep);
% [alllabel, centers] = litekmeans([allU],k, 'MaxIter',maxIter,'Replicates',numRep);
% label = alllabel(1:nSmp);
% markslbl = alllabel(nSmp+1:end);
% % save lk allU -append;
% % if exist('rndidx', 'var'),
% %     save lk rndidx -append
% % end

%==========================================================
% for i = 1:length(Zfiles),
%     load(Zfiles{i}, 'Zhat');
%     U = Zhat*bsxfun(@times, V, eigvalue_MinusHalf');
%     save(Zfiles{i}, 'U', '-append');
% end
% fn = fullfile(tmpdir, sprintf('V.mat', i));
% U = V; 
% save(fn, 'U');
% [centers] = hiekmeans(Zfiles, k, 'U');
% label = zeros(nSmp, 1); j = 1;
% for i = 1:length(Zfiles),
%     load(Zfiles{i}, 'U');
%     lenU = size(U, 1);
%     label(j:j+lenU-1) = knnsearch(centers, U);
%     j = j + lenU;
% end
% markslbl = knnsearch(centers, V);
%==========================================================

for i = 1:length(Zfiles),
    load(Zfiles{i}, 'Zhat');
    U = Zhat*bsxfun(@times, V, eigvalue_MinusHalf');
    save(Zfiles{i}, 'U', '-append');
end

% bestenergy = inf;
% for i=1:numRep, 
%     [sublabel, centers, energy]=kmeanspp(Us', k);
%     if i == 1 || energy < bestenergy,
%         bestlabel = sublabel;
%         bestcenters = centers;
%         bestenergy = energy;
%     end
% end
% sublabel = bestlabel;
% centers = bestcenters;

[sublabel, centers]=kmeanspp(Us', k, 'MaxIter',maxIter,'Replicates',numRep);

if useSeqKMLabel,
    [asgn] = countassignment(sublabel, k);
    [centers] = updateSeqkmeans(centers, asgn, Zfiles, 'U');
end

label = zeros(nSmp, 1); j = 1;
for i = 1:length(Zfiles),
    load(Zfiles{i}, 'U');
    lenU = size(U, 1);
    label(j:j+lenU-1) = knnsearch(centers, U);
    j = j + lenU;
end
markslbl = knnsearch(centers, V);


%==========================================================
% for i = 1:length(Zfiles),
%     load(Zfiles{i}, 'Zhat');
%     U = Zhat*bsxfun(@times, V, eigvalue_MinusHalf');
%     save(Zfiles{i}, 'U', '-append');
% end
% [label, centers] = diskkmeans(Zfiles, 'U', k, 'start', 'sample', ...
%     'subsample', Us, 'MaxIter',maxIter,'Replicates',numRep);
% markslbl = knnsearch(centers, V);

%==========================================================
runtime(end+1) = toc(ticId); %------------------------------




