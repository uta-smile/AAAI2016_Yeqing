function [label, markslbl, marks] = RandBiSC(data,k,opts)
% label = RandBiSC(data,k,opts): Landmark-based Spectral Clustering
% Input:
%       - data: the data matrix of size nSmp x nFea, where each row is a sample
%               point
%       - k: the number of clusters
%       opts: options for this algorithm
%           - p: the number of landmarks picked (default 1000)
%           - r: the number of nearest landmarks for representation (default 5)
%           - numRep: the number of replicates for the final kmeans (default 10)
%           - maxIter: the maximum number of iterations for final kmeans (default 100)
%           - mode: landmark selection method, currently support
%               - 'kmeans': use centers of clusters generated by kmeans (default)
%               - 'random': use randomly sampled points from the original
%                           data set 
%           The following parameters are effective ONLY in mode 'kmeans'
%           - kmNumRep: the number of replicates for initial kmeans (default 1)
%           - kmMaxIter: the maximum number of iterations for initial kmeans (default 5)
% Output:
%       - label: the cluster assignment for each point
% Requre:
%       litekmeans.m
% Usage:
%       data = rand([100,50]);
%       label = RandBiSC(data,10);
%



% Set and parse parameters
if (~exist('opts','var'))
   opts = [];
end


p = 1000;
if isfield(opts,'p')
    p = opts.p;
end

r = 5;
if isfield(opts,'r')
    r = opts.r;
end

maxIter = 100;
if isfield(opts,'maxIter')
    maxIter = opts.maxIter;
end

numRep = 10;
if isfield(opts,'numRep')
    numRep = opts.numRep;
end

mode = 'kmeans';
if isfield(opts,'mode')
    mode = opts.mode;
end

nSubSmp = size(data, 1);
if isfield(opts,'nSubSmp')
    nSubSmp = opts.nSubSmp;
end

nSmp=size(data,1);

nSubSmp = min(nSubSmp, nSmp);
subIdx = randperm(nSmp, nSubSmp);

% Landmark selection
if strcmp(mode,'kmeans')
    kmMaxIter = 5;
    if isfield(opts,'kmMaxIter')
        kmMaxIter = opts.kmMaxIter;
    end
    kmNumRep = 1;
    if isfield(opts,'kmNumRep')
        kmNumRep = opts.kmNumRep;
    end
    [IDX,marks]=litekmeans(data(subIdx, :),p,'MaxIter',kmMaxIter,'Replicates',kmNumRep);
%     tidAnchor = tic;
%     asgn = zeros(p, 1);
%     for i = 1:p,
%         asgn(i) = (sum(IDX == i));
%     end
%     asgn = int32(asgn);
%     step = 1000;
%     marksT = marks';
%     ridx = randperm(nSmp);
%     for i = 1:step:nSmp,
%         stop = min(i+step-1, nSmp);
%         t = data(ridx(i:stop), :)';
%         seqKmeans2(marksT, asgn, t);
%     end
%     marks = marksT'; clear marksT
%     %seqKmeans(marks, asgn, data);
%     toc(tidAnchor);
    
    %[dump,marks]=litekmeans(data,p,'MaxIter',kmMaxIter,'Replicates',kmNumRep);
    clear kmMaxIter kmNumRep
elseif strcmp(mode,'random')
    indSmp = randperm(nSmp);
    marks = data(indSmp(1:p),:);
    clear indSmp
else
    error('mode does not support!');
end

% Z construction
D = EuDist2(data,marks,0);

if isfield(opts,'sigma')
    sigma = opts.sigma;
else
    sigma = mean(mean(D));
end

dump = zeros(nSmp,r);
idx = dump;
for i = 1:r
    [dump(:,i),idx(:,i)] = min(D,[],2);
    temp = (idx(:,i)-1)*nSmp+[1:nSmp]';
    D(temp) = 1e100; 
end

dump = exp(-dump/(2*sigma^2));
sumD = sum(dump,2);
Gsdx = bsxfun(@rdivide,dump,sumD);
Gidx = repmat([1:nSmp]',1,r);
Gjdx = idx;
Z=sparse(Gidx(:),Gjdx(:),Gsdx(:),nSmp,p);

% Graph decomposition
feaSum = full(sqrt(sum(Z,1)));
feaSum = max(feaSum, 1e-12);
Z = Z./feaSum(ones(size(Z,1),1),:);
[U S V] = mySVD(Z,k+1);
U(:,1) = [];
V(:,1) = [];

U=U./repmat(sqrt(sum(U.^2,2)),1,k);
V=V./repmat(sqrt(sum(V.^2,2)),1,k);

% Final kmeans
% [alllabel] = litekmeans([U; V],k,'MaxIter',maxIter,'Replicates',numRep);
% label = alllabel(1:nSmp);
% markslbl = alllabel(nSmp+1:end);

subIdx = randperm(nSmp, nSubSmp);
[sublabel, centers] = litekmeans([U(subIdx, :); V],k,'MaxIter',maxIter,'Replicates',numRep);
% markslbl = sublabel(nSubSmp+1:end);
% label = knnsearch(centers, U, 'K', 1);

asgn = zeros(k, 1);
for i = 1:k,
    asgn(i) = (sum(sublabel == i));
end
asgn = int32(asgn);
tidFinal = tic;
[alllabel] = seqKmeans(centers, asgn, [U; V]);
toc(tidFinal)
label = alllabel(1:nSmp);
markslbl = alllabel(nSmp+1:end);













